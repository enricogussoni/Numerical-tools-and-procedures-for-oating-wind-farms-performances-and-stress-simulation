% Test script to better compare PSD of different signals not only grafically 
% but mathematically.
% Basically it maps PSD peaks position in a matrix that has as many colums
% as variables and as many rows as sampled frequencies.


%% Loading data
% ATTENTION: colums of constant values or with just a different valua at
% time 0 will make an error occur when scaling PSD plots. FAST output
% channels have to be chosed thinking at that. Otherwise only
% "createDataFile has to be used and unvalid colums have to be manually
% removed.

variableNames = dataTable.Properties.VariableNames; % Vector of variable's names
variableNames = variableNames(2:end);               % Removing "Time"

Psd = zeros(ceil(size(dataMatrix,1)/2),size(dataMatrix,2)-1); % Time colum is ignored for spectra
peaksValues = zeros(size(Psd));
frequences = zeros(size(Psd));
maxFreqSingleVariable = zeros(size(dataMatrix,2));


%% Evaluation and comparison

filterCoef = 10; % Necessary to ignore peaks that are less than 1/filterCoef of maximum peak
maxFreq = 0;     % Initialization (changed in next "for" cycle)

for cc = 2:(size(dataMatrix,2)-1) % 1 = Time (PSD of time doesn't make sense)
     
    [Psd(:,cc),frequences(:,cc)] = PSD(dataMatrix(:,cc),Time);            % PSD evaluation (frequences matrix is unnecessary but usefull to check)
    MaxPSD = max(Psd(:,cc));                                              % Reference value to filter low level peaks
    filteredPSD = Psd(:,cc);                                              % New variable not to overwrite "psd"
    filteredPSD(filteredPSD<(1/filterCoef)*MaxPSD)=0;                     % Filtering of peaks smaller than filterCoef*MaxPSD
    [singleVariablePeaksValues,peaksPositions] = findpeaks(filteredPSD);  % Values and position of PSD peaks (high-pass filtered)
    peaksValues(peaksPositions,cc) = singleVariablePeaksValues;           % Saves peaks values in their position
    
    
%     [psd(:,cc),frequences(:,cc)] = PSD(dataMatrix(:,cc),Time);          % PSD evaluation (frequences matrix is unnecessary but usefull to check)
%     [singleVariablePeaksValues,peaksPositions] = findpeaks(psd(:,cc));  % Values and position of PSD peaks
%     peaksValues(peaksPositions,cc) = singleVariablePeaksValues;         % Saves peaks values in their position
         
    
    Freq = frequences(:,cc);                                              % CHECK: all frequency vectors should be the same
    %maxFreqSingleVariable(cc)=max(Freq(peaksPositions));                 % Maximum relevant frequency of the considered variable
    if max(Freq(peaksPositions)) > maxFreq
       maxFreq = max(Freq(peaksPositions));                               % To avoid plotting usless high frequencies
    end
    
end

Positions = peaksValues>0;                % Puts a 1 where there is a peak
whereIsMaxFreq = find(Freq==maxFreq);     % Position of the maximum frequency
positions = Positions(1:whereIsMaxFreq,:);% Shortened peaks matrix
freq = Freq(1:whereIsMaxFreq);            % Shortened frequencies vector

%% Building of the table
% Considering just values for frequency < maxFreq

spectrumTable = [array2table(freq) array2table(positions)];      % 1 means that there is a peak for that variable (column) at that frequency
spectrumTable.Properties.VariableNames = ['Freq' variableNames]; % Names are added at the table


%% Syntetized table
% Rows without peaks are removed

% removedFlag = 0; % Flag to notice remival
% 

% spectrumMatrix = spectrumMatrix(:,2:end); % Removing first column (frequencies)
% for check = 1:size(spectrumMatrix,1)
%     check_in = check; 
%     
%     if check_in >= size(spectrumMatrix,1)
%         break
%     end
%     
%     if removedFlag ==1
%         check_in = check-1;               % To check also the column next to the removed one
%     end
%     
%     if spectrumMatrix(check,:) == zeros(1,size(spectrumMatrix,2))
%         spectrumMatrix(check,:) = [];     % Removes lines full of zeroes
%         fprintf('Removed row %d \n',check);
%         removedFlag = 1;
%     end
% end

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% spectrumMatrix = table2array(spectrumTable);
% spectrumMatrixSmall=spectrumMatrix(1:140,:);
% createfigureSpectrumTable(spectrumMatrixSmall);

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% function createfigure(cdata1)
% %CREATEFIGURE(cdata1)
% %  CDATA1:  image cdata
% 
% %  Auto-generated by MATLAB on 04-Mar-2019 18:19:43
% 
% % Create figure
% figure1 = figure;
% 
% % Create axes
% axes1 = axes('Parent',figure1,...
%     'Position',[0.13 0.0526315789473684 0.775 0.94078947368421]);
% hold(axes1,'on');
% 
% % Create image
% image(cdata1,'Parent',axes1,'CDataMapping','scaled');
% 
% box(axes1,'on');
% axis(axes1,'ij');
% % Set the remaining axes properties
% set(axes1,'Color',[0.0784313753247261 0.168627455830574 0.549019634723663],...
%     'Layer','top','XColor',[0 0 0],'XGrid','on','XTick',...
%     [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40],...
%     'YColor',[0 0 0],'YGrid','on','YTick',...
%     [0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110 115 120 125 130 135 140 145 150],...
%     'YTickLabel',...
%     {'0','0.0833','0.1665','0.2498','0.3331','0.4163','0.4996','0.5828','0.6661','0.7494','0.8326','0.9159','0.9992','1.0824','1.1657','1.2490','1.3322','1.4155','1.4988','1.5820','1.6653','1.7485','1.8318','1.9151','1.9983','2.0816','2.1649','2.2481','2.3314','2.4147','2.4813'},...
%     'ZColor',[0 0 0]);


